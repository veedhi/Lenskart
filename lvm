What is LVM and how to implement that?

LVM stands for Logical Volume Manager and is a way of grouping drives and/or partition in a way where instead of dealing with hard and fast physical partitions the data is managed in a virtual basis where the virtual partitions can be resized.

First check the disk status with df -h

check the space on which partion we have to create lvm

 

fdisk  /dev/sdb – m  [ n - p (primery partition) -- create 3 partitions ]

change the partion to lvm partion id

 

fdisk  /dev/sdb  t -  give partion no -- type 8e

change all three partition

 

Use a command to check how many physical volumes present

 

pvdisplay

pvcreate  pvname /dev/sdb1 /dev/sdb2

pvdisplay

vgcreate volumegroup name /dev/sdb1

vgdisplay

to activate this --- use a command  - vgchage -a y vg1(volumegroup name)

 

lvdisplay

lvcreate -L 1G -n LV1 vg1  (-n new lvm)

mkfs.ext3 /dev/vg1/lv1

create a directory and mount it

mount /dev/vg1/lv1 /temp

 

To increase the LVM

unmount it with umount command

lvextend -L +500m -r /dev/vg1/lv1  (r - resize)

e2fsck /dev/vg1/lv1

resize2fs /dev/vg1/lv1

then mount it again. -- Check with command df -h

 

ext2

If you are using LVM 1 with ext2 as the file system then you can use the e2fsadm command mentioned earlier to take care of both the file system and volume resizing as follows:

 

# umount /home

# e2fsadm -L-1G /dev/myvg/home vol

# mount /home

 

If you prefer to do this manually you must know the new size of the volume in blocks and use the following commands:

 

# umount /home

# resize2fs /dev/myvg/homevol 524288

# lvreduce -L-1G /dev/myvg/homevol

# mount /home

om nilachal nibasaya nityaya paramatanane namaha

blaabhadara subhdrabhyan jagnathayate namaha

 

# umount /webroot

# e2fsadm -L -1000M /dev/vg0/webroot

L -1000M: Resize the filesystem/logical volume to or by the given size.

If you use + or - then the number will be relative the the current size

of the logical volume, otherwise the volume will be resized to LogicalVolumeSize. A size suffix of K for kilobytes, M for megabytes, G for gigabytes or T for terabytes can be used.

 

EXT2

Ext2 stands for second extended file system.

It was introduced in 1993 developed by Rémy Card.

This was developed to overcome the limitation of the original ext file system.

Ext2 does not have journaling feature.

ext2 is recommended - flash drives, usb drives

Maximum individual file size can be from 16 GB to 2 TB

Overall ext2 file system size can be from 2 TB to 32 TB

 

EXT3

Ext3 stands for third extended file system

It was introduced in 2001 developed by Stephen Tweedie.

Starting from Linux Kernel 2.4.15 ext3 was available.

The main benefit of ext3 is that it allows journaling.

Journaling has a dedicated area in the file system, where all the changes are tracked.

When the system crashes, the possibility of file system corruption is less because of journaling.

Maximum individual file size can be from 16 GB to 2 TB

Overall ext3 file system size can be from 2 TB to 32 TB

 

 

There are three types of journaling in ext3 file system.

Journal – Metadata and content are saved in the journal.

 

Ordered – Only metadata is saved in the journal. Metadata are journal only after

writing the content to disk. This is the default.

 

Writeback – Only metadata is saved in the journal. Metadata might be journaled either before or after the content is written to the disk. You can convert a ext2 file system to ext3 file system directly (without backup/restore).

 

EXT4

Ext4 stands for fourth extended file system.

It was introduced in 2008.

Starting from Linux Kernel 2.6.19 ext4 was available.

Maximum individual file size can be from 16 GB to 16 TB

Directory can contain a maximum of 64,000 subdirectories

Overall maximum ext4 file system size is 1 EB (exabyte).

1 EB = 1024 PB (petabyte). 1 PB = 1024 TB (terabyte).

Several other new features are introduced in ext4: multiblock allocation,

delayed allocation, journal checksum. fast fsck, etc.

In ext4, you also have the option of turning the journaling feature “off”.

 

How to create file system?

 

Create an ext2 file System: mke2fs /dev/sda1

 

Create an ext3 file system   mkfs.ext3 /dev/sda1

                             mke2fs –j /dev/sda1

 

Create an ext4 file system   mkfs.ext4 /dev/sda1

                             mke2fs -t ext4 /dev/sda1

 

Converting ext2 to ext3

 

For example, if you are upgrading /dev/sda2 that is mounted as /home,

from ext2 to ext3

 

umount /dev/sda2

tune2fs -j /dev/sda2

mount /dev/sda2 /home

 

Converting ext3 to ext4

If you are upgrading /dev/sda2 that is mounted as /home,

from ext3 to ext4, do the following.

 

umount /dev/sda2

tune2fs -O extents, uninit_bg, dir_index /dev/sda2

e2fsck -pf /dev/sda2

mount /dev/sda2 /home







 lsblk
   18  fdisk /dev/xvdf 
   19  fdisk -l
   20  apt-get install lvm2 -y
   21  partprobe /dev/xvdf1
   22  pvcreate /dev/xvdf1
   23  vgcreate myvolgrp /dev/xvdf1
   24  lvcreate -L 1G -n personal myvolgrp 
   25  mkfs.ext3 /dev/myvolgrp/personal 
   26  cd /mnt/
   27  mkdir test
   28  mount /dev/myvolgrp/personal /mnt/test/
   29  lvextend -L1G /dev/myvolgrp/personal 
   30  lvextend -L2G /dev/myvolgrp/personal
  resize2fs /dev/myvolgrp/personal 
  pvdisplay 
   40  vgdisplay 
   41  lvdisplay 

